TERM
  AUTO
  BREAK
  CASE
  CHAR
  CONST
  CONTINUE
  DEFAULT
  DO
  DOUBLE
  ELSE
  ENUM
  EXTERN
  FLOAT
  FOR
  GOTO
  IF
  INT
  LONG
  REGISTER
  RESTRICT
  RETURN
  SHORT
  SIGNED
  SIZEOF
  STATIC
  STRUCT
  SWITCH
  TYPEDEF
  UNION
  UNSIGNED
  VOID
  VOLATILE
  WHILE

  _BOOL
  _COMPLEX
  _IMAGINARY

  ADD_ASSIGN
  AND_ASSIGN
  AND_OP
  DEC_OP
  DIV_ASSIGN
  EQ_OP
  ELIPSIS
  GE_OP
  INC_OP
  INLINE
  LE_OP
  LEFT_ASSIGN
  LEFT_OP
  MOD_ASSIGN
  MUL_ASSIGN
  NE_OP
  OR_ASSIGN
  OR_OP
  PTR_OP
  RIGHT_ASSIGN
  RIGHT_OP
  SUB_ASSIGN
  XOR_ASSIGN

  IDENTIFIER
  CONSTANT
  STRING_LITERAL

  SPACE

start : translation_unit
      ;

error : '>' '>' '>' '>' '>' '>' ;

identifier : IDENTIFIER
           ;

constant : CONSTANT
         ;

string_literal : STRING_LITERAL
               ;




primary_expression : identifier
                   | constant
                   | string_literal
                   | '(' expression ')'
                   ;



postfix_expression : primary_expression
                   | postfix_expression '[' expression ']'
                   | postfix_expression '(' argument_expression_list_opt ')'
                   | postfix_expression '.' identifier
                   | postfix_expression PTR_OP identifier
                   | postfix_expression INC_OP
                   | postfix_expression DEC_OP
                   | '(' type_name ')' '{' initializer_list '}'
                   | '(' type_name ')' '{' initializer_list ',' '}'
                   ;

argument_expression_list_opt :
                             | argument_expression_list
                             ;

argument_expression_list : assignment_expression
                         | argument_expression_list ',' assignment_expression
                         ;


unary_expression : postfix_expression
                 | INC_OP unary_expression
                 | DEC_OP unary_expression
                 | unary_operator  cast_expression
                 | SIZEOF unary_expression
                 | SIZEOF '(' type_name ')'
                 ;


unary_operator : '&'
               | '*'
               | '+'
               | '-'
               | '~'
               | '!'
               ;


cast_expression : unary_expression
                | '(' type_name ')' cast_expression
                ;


multiplicative_expression : cast_expression
                          | multiplicative_expression '*' cast_expression
                          | multiplicative_expression '/' cast_expression
                          | multiplicative_expression '%' cast_expression
                          ;


additive_expression : multiplicative_expression
                    | additive_expression '+' multiplicative_expression
                    | additive_expression '-' multiplicative_expression
                    ;


shift_expression : additive_expression
                 | shift_expression LEFT_OP additive_expression
                 | shift_expression RIGHT_OP additive_expression
                 ;


relational_expression : shift_expression
                      | relational_expression '<' shift_expression
                      | relational_expression '>' shift_expression
                      | relational_expression LE_OP shift_expression
                      | relational_expression GE_OP shift_expression
                      ;


equality_expression : relational_expression
                    | equality_expression EQ_OP relational_expression
                    | equality_expression NE_OP relational_expression
                    ;


AND_expression : equality_expression
               | AND_expression '&' equality_expression
               ;


exclusive_OR_expression : AND_expression
                        | exclusive_OR_expression '^' AND_expression
                        ;


inclusive_OR_expression : exclusive_OR_expression
                        | inclusive_OR_expression '|' exclusive_OR_expression
                        ;


logical_AND_expression : inclusive_OR_expression
                       | logical_AND_expression AND_OP inclusive_OR_expression
                       ;


logical_OR_expression : logical_AND_expression
                      | logical_OR_expression OR_OP logical_AND_expression
                      ;


conditional_expression : logical_OR_expression
                       | logical_OR_expression '?' expression ':' conditional_expression
                       ;


assignment_expression : conditional_expression
                      | unary_expression  assignment_operator  assignment_expression
                      ;


assignment_operator :  '='
                    |  MUL_ASSIGN
                    |  DIV_ASSIGN
                    |  MOD_ASSIGN
                    |  ADD_ASSIGN
                    |  SUB_ASSIGN
                    |  LEFT_ASSIGN
                    |  RIGHT_ASSIGN
                    |  AND_ASSIGN
                    |  XOR_ASSIGN
                    |  OR_ASSIGN
                    ;


expression : assignment_expression
           | expression ',' assignment_expression
           | error
           ;


constant_expression : conditional_expression
                    ;




               
declaration : declaration_specifiers init_declarator_list_opt ';'
            | error
            ;

init_declarator_list_opt :
                         | init_declarator_list
                         ;




declaration_specifiers : storage_class_specifier  declaration_specifiers_opt
   	               | type_specifier  declaration_specifiers_opt
                       | type_qualifier  declaration_specifiers_opt
                       | function_specifier  declaration_specifiers_opt
                       ;

declaration_specifiers_opt :
                           | declaration_specifiers
                           ;


init_declarator_list : init_declarator
                     | init_declarator_list ',' init_declarator
                     ;


init_declarator : declarator
                | declarator '=' initializer
                ;

storage_class_specifier : TYPEDEF
                        | EXTERN
                        | STATIC
                        | AUTO
	                | REGISTER
                        ;


type_specifier : VOID
               | CHAR
               | SHORT
               | INT
               | LONG
               | FLOAT
               | DOUBLE
               | SIGNED
               | UNSIGNED
               | _BOOL
               | _COMPLEX
               | _IMAGINARY
               | struct_or_union_specifier
               | enum_specifier
               | typedef_name
               ;




struct_or_union_specifier : struct_or_union  identifier_opt
                                 '{' struct_declaration_list '}'
                          | struct_or_union  identifier
                          ;

identifier_opt :
               | identifier
               ;


struct_or_union : STRUCT
                | UNION
                ;


struct_declaration_list : struct_declaration
                        | struct_declaration_list  struct_declaration
                        ;


struct_declaration : specifier_qualifier_list  struct_declarator_list ';'
                   ;




specifier_qualifier_list : type_specifier  specifier_qualifier_list_opt
                         | type_qualifier  specifier_qualifier_list_opt
                         ;

specifier_qualifier_list_opt : 
                             | specifier_qualifier_list
                             ;


struct_declarator_list : struct_declarator
                       | struct_declarator_list ',' struct_declarator
                       ;




struct_declarator : declarator
                  | declarator_opt ':' constant_expression
                  ;

declarator_opt :
               | declarator
               ;


enum_specifier : ENUM identifier_opt '{' enumerator_list '}'
               | ENUM identifier_opt '{' enumerator_list ',' '}'
               | ENUM identifier
               ;


enumerator_list : enumerator
                | enumerator_list ',' enumerator
                ;


enumerator : enumeration_constant
           | enumeration_constant '=' constant_expression
           ;


type_qualifier : CONST
               | RESTRICT
               | VOLATILE
               ;


function_specifier : INLINE
                   ;




declarator : pointer_opt direct_declarator
           ;

pointer_opt :
            | pointer
            ;



direct_declarator : identifier
                  | '(' declarator ')'
                  | direct_declarator '[' type_qualifier_list_opt assignment_expression_opt ']'
                  | direct_declarator '[' STATIC type_qualifier_list_opt assignment_expression ']'
                  | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
                  | direct_declarator '[' type_qualifier_list_opt '*' ']'
                  | direct_declarator '(' parameter_type_list ')'
                  | direct_declarator '(' identifier_list_opt ')'
                  ;

type_qualifier_list_opt :
                        | type_qualifier_list
                        ;

identifier_list_opt :
                    | identifier_list
                    ;


pointer : '*' type_qualifier_list_opt
        | '*' type_qualifier_list_opt pointer
        ;


type_qualifier_list : type_qualifier
                    | type_qualifier_list  type_qualifier
                    ;


parameter_type_list : parameter_list
                    | parameter_list ',' ELIPSIS
                    ;


parameter_list : parameter_declaration
               | parameter_list ',' parameter_declaration
               ;




parameter_declaration : declaration_specifiers declarator
                      | declaration_specifiers abstract_declarator_opt
                      ;

abstract_declarator_opt :
                        | abstract_declarator
                        ;


identifier_list : identifier
                | identifier_list ',' identifier
                ;


type_name: specifier_qualifier_list  abstract_declarator_opt
         ;


abstract_declarator : pointer
                    | pointer_opt direct_abstract_declarator
                     ;




direct_abstract_declarator : '(' abstract_declarator ')'
                           | direct_abstract_declarator_opt '[' assignment_expression_opt ']'
                           | direct_abstract_declarator_opt '[' '*' ']'
                           | direct_abstract_declarator_opt '(' parameter_type_list_opt ')'
                           ;

direct_abstract_declarator_opt :
                               | direct_abstract_declarator
                               ;

assignment_expression_opt :
                          | assignment_expression
                          ;

parameter_type_list_opt :
                        | parameter_type_list
                        ;


typedef_name : identifier
             ;


initializer : assignment_expression
            | '{' initializer_list '}'
            | '{' initializer_list ',' '}'
            ;




initializer_list : designation_opt initializer
                 | initializer_list ',' designation_opt initializer
                 ;

designation_opt :
                | designation
                ;


designation : designator_list '='
            ;


designator_list : designator
                | designator_list  designator
                ;


designator : '[' constant_expression ']'
           | '.' identifier
           ;



statement : labeled_statement
          | compound_statement
          | expression_statement
          | selection_statement
          | iteration_statement
          | jump_statement
          | error
          ;


labeled_statement : identifier ':' statement
                  | CASE constant_expression ':' statement
                  | DEFAULT ':' statement
                  ;




compound_statement : '{' block_item_list_opt '}'
                   ;

block_item_list_opt :
                    | block_item_list
                    ;


block_item_list : block_item
                | block_item_list  block_item
                ;


block_item : declaration
           | statement
           ;




expression_statement : expression_opt ';'
                     ;
expression_opt :
               | expression
               ;


selection_statement : IF '(' expression ')' statement
                    | IF '(' expression ')' statement ELSE statement
                    | SWITCH '(' expression ')' statement
                    ;


iteration_statement : WHILE '(' expression ')' statement
                    | DO statement WHILE '(' expression ')' ';'
                    | FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement
                    | FOR '(' declaration  expression_opt ';' expression_opt ')' statement
                    ;


jump_statement : GOTO identifier ';'
               | CONTINUE ';'
               | BREAK ';'
               | RETURN expression_opt ';'
               ;



translation_unit : external_declaration
                 | translation_unit external_declaration
                 ;


external_declaration : declaration
                     | function_definition
                     ;




function_definition : declaration_specifiers declarator  declaration_list_opt compound_statement
                   ;

declaration_list_opt :
                     | declaration_list
                     ;


declaration_list : declaration
                 | declaration_list  declaration
                 ;



enumeration_constant : identifier
                     ;
